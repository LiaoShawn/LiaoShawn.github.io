<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>线性表的链式表示与实现</title>
    <link href="/2021/10/17/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/10/17/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="单链表的定义与表示"><a href="#单链表的定义与表示" class="headerlink" title="单链表的定义与表示"></a>单链表的定义与表示</h3><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p>特点：用一组任意的存储单元存储线性表的数据元素。</p><p>数据元素加上直接后继的地址组成链表的<strong>结点</strong>（node）。</p><p>两个域：</p><p>​    存储数据元素信息的域称为<strong>数据域</strong>；</p><p>​    存储直接后继存储位置的域称为<strong>指针域</strong>。</p><p>​    （指针域中存储的信息称作<strong>指针或链</strong>）</p><p>n个结点链结成一个链表，即为线性表的链式存储结构，每个结点只包含一个指针域，故为单链表或线性链表。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表的顺序表示与实现</title>
    <link href="/2021/10/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/10/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>线性表：由n(n≥0)个数据特性相同的元素构成的有限序列成为线性表。<br>(n=0时为空表)</p><p>线性表是一种典型的线性结构，数据元素是有序且有限的。<br>基本条件：</p><ul><li>存在唯一的被成为“第一个”的数据元素</li><li>存在一个唯一的被称为“最后一个”的数据元素</li><li>除第一个元素外，每个元素均有唯一一个直接前驱</li><li>除最后一个元素外，每个元素均有唯一一个直接后继</li></ul><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，这种表示也称作线性表的顺序存储结构或顺序映像。这种箱形镳成为顺序表。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><h4 id="数据设计（假设一个存储书籍信息的顺序表）"><a href="#数据设计（假设一个存储书籍信息的顺序表）" class="headerlink" title="数据设计（假设一个存储书籍信息的顺序表）"></a>数据设计（假设一个存储书籍信息的顺序表）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 10000 <span class="hljs-comment">//顺序表最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span> <span class="hljs-comment">//定义书籍结构体</span><br>    <span class="hljs-keyword">char</span> id[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];<br>    <span class="hljs-keyword">float</span> price;<br>&#125;Book;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span> <span class="hljs-comment">//定义顺序表结构体</span><br>    Book *elem;<br>    <span class="hljs-keyword">int</span> length;<br>&#125;SqList;<br></code></pre></td></tr></table></figure><p>这里引入<code>stdlib.h</code>是为了使用<code>malloc</code>函数</p></li><li><h4 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//初始化方法：参数为顺序表指针；返回值为结果字符串</span><br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">InitList</span><span class="hljs-params">(SqList *L)</span></span>&#123;<br>    L-&gt;elem=(Book*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Book)*MAXSIZE);<br>    <span class="hljs-keyword">if</span>(!L-&gt;elem) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OVERFLOW&quot;</span>;<br>    L-&gt;length=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化方法传入的参数是指向顺序表的指针，作用是可以在方法内直接对顺序表做修改，如下写法就是错误的，修改不生效。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">InitList</span><span class="hljs-params">(SqList L)</span></span>&#123;<br>    L.elem=(Book*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Book)*MAXSIZE);<br>    <span class="hljs-keyword">if</span>(!L.elem) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OVERFLOW&quot;</span>;<br>    L.length=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">SqList L;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,InitList(&amp;L));<br></code></pre></td></tr></table></figure></li></ul><ul><li><h4 id="插入实现"><a href="#插入实现" class="headerlink" title="插入实现"></a>插入实现</h4><p>插入可以使用两种方法实现，一种是传入插入元素的指针，一种是传入插入元素的变量名；</p><ul><li><h5 id="在定义元素结构体时可以这样定义"><a href="#在定义元素结构体时可以这样定义" class="headerlink" title="在定义元素结构体时可以这样定义"></a>在定义元素结构体时可以这样定义</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span> <span class="hljs-comment">//定义书籍结构体</span><br>    <span class="hljs-keyword">char</span> *id;<br>    <span class="hljs-keyword">char</span> *name;<br>    <span class="hljs-keyword">float</span> price;<br>&#125;Book,*LinkBook;<br></code></pre></td></tr></table></figure><p>这里的<code>*LinkBook</code>是指定义指向该结构体的指针，<code>LinkBook book</code>的意思就是声明一个指向一个书籍结构体的指针。假如这里定义了一个<code>Book book=&#123;&quot;2021101501&quot;,&quot;数据结构&quot;,12.3&#125;</code>，就可以使用<code>LinkBook linkBook=&amp;book</code>来获取指针的值。</p></li><li><h5 id="在定义插入方法时就可以选择接收两种参数"><a href="#在定义插入方法时就可以选择接收两种参数" class="headerlink" title="在定义插入方法时就可以选择接收两种参数"></a>在定义插入方法时就可以选择接收两种参数</h5><p>第一种是接收变量名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList *L,<span class="hljs-keyword">int</span> i,Book book)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L-&gt;length+<span class="hljs-number">1</span>||L-&gt;length==MAXSIZE)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L-&gt;length<span class="hljs-number">-1</span>;j&gt;=i<span class="hljs-number">-1</span>;j--)&#123;<br>        L-&gt;elem[j+<span class="hljs-number">1</span>]=L-&gt;elem[j];<br>    &#125;<br>    L-&gt;elem[i<span class="hljs-number">-1</span>]=book;<br>    L-&gt;length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里在调用方法时传入的参数类型应该是Book型；</p><p>第二种是接收指针参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList *L,<span class="hljs-keyword">int</span> i,LinkBook book)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L-&gt;length+<span class="hljs-number">1</span>||L-&gt;length==MAXSIZE)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L-&gt;length<span class="hljs-number">-1</span>;j&gt;=i<span class="hljs-number">-1</span>;j--)&#123;<br>        L-&gt;elem[j+<span class="hljs-number">1</span>]=L-&gt;elem[j];<br>    &#125;<br>    L-&gt;elem[i<span class="hljs-number">-1</span>]=*book;<br>    L-&gt;length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里再调用方法时传入的参数类型应该时LinkBook型，或<code>Book &amp;book</code>。</p></li><li><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Book book1=&#123;<span class="hljs-string">&quot;2020101501&quot;</span>,<span class="hljs-string">&quot;数据结构&quot;</span>,<span class="hljs-number">12.3</span>&#125;;<br>ListInsert(&amp;L,L.length+<span class="hljs-number">1</span>,book1);<br>Book book2=&#123;<span class="hljs-string">&quot;2020101502&quot;</span>,<span class="hljs-string">&quot;计算机组成原理&quot;</span>,<span class="hljs-number">23.4</span>&#125;;<br>ListInsert(&amp;L,L.length+<span class="hljs-number">1</span>,book2);<br>Book book3=&#123;<span class="hljs-string">&quot;2020101503&quot;</span>,<span class="hljs-string">&quot;操作系统&quot;</span>,<span class="hljs-number">34.5</span>&#125;;<br>ListInsert(&amp;L,L.length+<span class="hljs-number">1</span>,book3);<br>Book book4=&#123;<span class="hljs-string">&quot;2020101504&quot;</span>,<span class="hljs-string">&quot;计算机网络&quot;</span>,<span class="hljs-number">45.6</span>&#125;;<br>ListInsert(&amp;L,L.length+<span class="hljs-number">1</span>,book4);<br></code></pre></td></tr></table></figure></li><li><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>这里使用的两种方法并没有太大区别，但可以更加方便理解<code>结构体指针</code>类型的使用。</p></li></ul></li><li><h4 id="取值实现"><a href="#取值实现" class="headerlink" title="取值实现"></a>取值实现</h4><p>取值需要三个参数：</p><p>​    顺序表（这里只需要访问，所以不用传指针）</p><p>​    取值位置</p><p>​    取值元素指针（需要一个元素指针，将取出的值带出来）</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//取值方法：参数为顺序表，取值位置，取值元素指针；返回值为结果字符串</span><br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList L,<span class="hljs-keyword">int</span> i,LinkBook book)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span>;<br>    *book=L.elem[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用的参数是指向书籍结构体的指针类型。</p><p>调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">LinkBook lbook1;<br>GetElem(L,<span class="hljs-number">2</span>,lbook1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;取出的书名为：%s\n&quot;</span>,lbook1-&gt;name);<br></code></pre></td></tr></table></figure></li></ul><ul><li><h4 id="查找实现"><a href="#查找实现" class="headerlink" title="查找实现"></a>查找实现</h4><p>在数据结构书中是直接将预查找元素与顺序表的elem逐个使用”==“进行比较，但C语言中并不支持这种方法直接比较，这里使用书名进行匹配查找。</p><p>参数为顺序表和书名字符串，返回整数，找到则返回位置，否则返回0；</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//查找方法：参数为顺序表，书名字符串；返回值为整型</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList L,<span class="hljs-keyword">char</span>* bname)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;L.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(L.elem[i].name==bname) <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span>* bname=<span class="hljs-string">&quot;计算机网络&quot;</span>;<br><span class="hljs-keyword">int</span> location=LocateElem(L,bname);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s的位置在第%d个\n&quot;</span>,bname,location);<br></code></pre></td></tr></table></figure></li><li><h4 id="删除实现"><a href="#删除实现" class="headerlink" title="删除实现"></a>删除实现</h4><p>该方法根据位置实现删除，参数为顺序表指针和删除位置</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//删除方法：参数为顺序表指针，删除位置</span><br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList *L,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L-&gt;length)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;L-&gt;length;j++)&#123;<br>        L-&gt;elem[j<span class="hljs-number">-1</span>]=L-&gt;elem[j];<br>    &#125;<br>    --L-&gt;length;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> del=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除第%d个%s\n&quot;</span>,del,ListDelete(&amp;L,del));<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>顺序表表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在校内实训期间敲的网站合集</title>
    <link href="/2021/06/29/%E5%9C%A8%E6%A0%A1%E5%86%85%E5%AE%9E%E8%AE%AD%E6%9C%9F%E9%97%B4%E6%95%B2%E7%9A%84%E7%BD%91%E7%AB%99%E5%90%88%E9%9B%86/"/>
    <url>/2021/06/29/%E5%9C%A8%E6%A0%A1%E5%86%85%E5%AE%9E%E8%AE%AD%E6%9C%9F%E9%97%B4%E6%95%B2%E7%9A%84%E7%BD%91%E7%AB%99%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>临近毕业，学校组织了一次实训，多是由培训机构带几天课，有意愿的同学报名培训。虽然没有参加，但这几天试听还是做了一些东西的，目前也没啥真正的项目经验，但这一组网页做的还是不错的~</p><!-- --><p>这组网页是使用HTML和css编写的，按照实训要求，并没有添加动态交互效果。共包含7个页面，首页包含一个轮播图（未实现动态），以及其他页面的部分摘要，这里只实现了部分跳转功能。</p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="/link/internship/i1.jpg" alt="首页"><br><a href="/link/internship/index.html">点我进入网页预览</a></p><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p><img src="/link/internship/i2.jpg" alt="首页"><br><a href="/link/internship/about.html">点我进入网页预览</a></p><h3 id="产品中心"><a href="#产品中心" class="headerlink" title="产品中心"></a>产品中心</h3><p><img src="/link/internship/i3.jpg" alt="首页"><br><a href="/link/internship/center.html">点我进入网页预览</a></p><h3 id="新闻动态"><a href="#新闻动态" class="headerlink" title="新闻动态"></a>新闻动态</h3><p><img src="/link/internship/i4.jpg" alt="首页"><br><a href="/link/internship/news.html">点我进入网页预览</a></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><img src="/link/internship/i5.jpg" alt="首页"><br><a href="/link/internship/jiejue.html">点我进入网页预览</a></p><h3 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h3><p><img src="/link/internship/i6.jpg" alt="首页"><br><a href="/link/internship/examp.html">点我进入网页预览</a></p><h3 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a>联系我们</h3><p><img src="/link/internship/i7.jpg" alt="首页"><br><a href="/link/internship/call.html">点我进入网页预览</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生js实现飞机大战</title>
    <link href="/2021/06/29/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/"/>
    <url>/2021/06/29/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这个小作品是在我刚学完JavaScript基础的时候突发奇想写出来的，同时也是为了锻炼自己，稳固学过的知识。<br>编写过程中没有参考过类似代码，都是按照自己的想法设计的，所以有一些影响代码执行效率的元素，后期提高技能后在进行改进吧~</p><h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><p>游戏以body对象为主体，添加分数模块（score）、控制模块（args）和飞机图片。</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gml">&lt;<span class="hljs-keyword">div</span> <span class="hljs-symbol">id</span>=<span class="hljs-string">&quot;score&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-symbol">id</span>=<span class="hljs-string">&quot;args&quot;</span>&gt;<br>敌机数量&lt;input type=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-built_in">min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-built_in">max</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-symbol">id</span>=<span class="hljs-string">&quot;enemyNum&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> /&gt;&lt;br&gt;<br>敌机速度&lt;input type=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-built_in">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-built_in">max</span>=<span class="hljs-string">&quot;45&quot;</span> <span class="hljs-symbol">id</span>=<span class="hljs-string">&quot;enemySpeed&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;img src=<span class="hljs-string">&quot;img/a4-2.png&quot;</span> <span class="hljs-symbol">id</span>=<span class="hljs-string">&quot;plane&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><p>子弹、飞机等元素都设置为绝对定位，并设置合适的宽高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;<br><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">720px</span>;<br>&#125;<br><span class="hljs-selector-id">#plane</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.zd</span>&#123;<br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/p-f03.png</span>);<br><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">position</span>: absolute;<br>&#125;<br><span class="hljs-selector-class">.enemy</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">180deg</span>);<br><span class="hljs-attribute">position</span>: absolute;<br>&#125;<br><span class="hljs-selector-id">#score</span>&#123;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br><span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br><span class="hljs-selector-id">#args</span>&#123;<br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">z-index</span>: <span class="hljs-number">9</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><p>使用定时器自动创建子弹和敌机，并创建动画，在子弹移动过程中检测碰撞，并处理击中操作。<br>添加了两个可设置属性：敌机速度和敌机数量，可以根据自己的爱好选择游戏模式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> plane=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;plane&quot;</span>);<span class="hljs-comment">//飞机</span><br><span class="hljs-keyword">var</span> body=<span class="hljs-built_in">document</span>.body;<br><span class="hljs-keyword">var</span> score=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;score&quot;</span>);<span class="hljs-comment">//分数盒子</span><br><span class="hljs-keyword">var</span> count=<span class="hljs-number">0</span>;<span class="hljs-comment">//分数</span><br><span class="hljs-keyword">var</span> enemyNum=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;enemyNum&quot;</span>);<span class="hljs-comment">//敌机数量控制</span><br><span class="hljs-keyword">var</span> en=<span class="hljs-number">2200</span>- <span class="hljs-built_in">parseInt</span>(enemyNum.value)*<span class="hljs-number">200</span>;<span class="hljs-comment">//设置范围</span><br><span class="hljs-keyword">var</span> enemySpeed=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;enemySpeed&quot;</span>);<span class="hljs-comment">//敌机速度控制</span><br><span class="hljs-keyword">var</span> es=<span class="hljs-number">50</span>-<span class="hljs-built_in">parseInt</span>(enemySpeed.value);<span class="hljs-comment">//范围</span><br><span class="hljs-keyword">var</span> args=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;args&quot;</span>);<span class="hljs-comment">//控制盒子</span><br>score.innerHTML=count+<span class="hljs-string">&quot;分&quot;</span>;<br>body.onmousemove=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//控制飞机跟随鼠标移动</span><br>plane.style.left=event.clientX-<span class="hljs-number">25</span>+<span class="hljs-string">&quot;px&quot;</span>;<br>plane.style.top=event.clientY-<span class="hljs-number">25</span>+<span class="hljs-string">&quot;px&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Enemy</span>(<span class="hljs-params">left</span>)</span>&#123;<span class="hljs-comment">//敌机构造函数</span><br><span class="hljs-built_in">this</span>.enemy=<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;img&quot;</span>);<span class="hljs-comment">//创建敌机元素</span><br><span class="hljs-built_in">this</span>.enemy.style.left=left;<span class="hljs-comment">//创建时设置位置</span><br><span class="hljs-built_in">this</span>.enemy.style.top=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">var</span> enemyArr=[];<span class="hljs-comment">//敌机数组，用于判断击中</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">begin</span>(<span class="hljs-params"></span>)</span>&#123;<br>body.timer=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//创建敌机定时器</span><br><span class="hljs-keyword">var</span> e=<span class="hljs-keyword">new</span> Enemy(<span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">1536</span>)+<span class="hljs-string">&quot;px&quot;</span>);<span class="hljs-comment">//随机生成位置</span><br>e.enemy.setAttribute(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;img/a4-2.png&quot;</span>);<br>e.enemy.setAttribute(<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;enemy&quot;</span>);<br>body.appendChild(e.enemy);<span class="hljs-comment">//将元素加入body</span><br>enemyArr.push(e);<span class="hljs-comment">//将新建的敌机放入数组</span><br>e.enemy.timer=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//创建敌机移动定时器</span><br>e.enemy.style.top=e.enemy.offsetTop+<span class="hljs-number">2</span>+<span class="hljs-string">&quot;px&quot;</span>;<br>e.left=e.enemy.offsetLeft;<br>e.top=e.enemy.offsetTop;<br><span class="hljs-keyword">if</span>(e.enemy.offsetTop&gt;=<span class="hljs-number">710</span>)&#123;<span class="hljs-comment">//敌机未被打中删除</span><br><span class="hljs-built_in">clearInterval</span>(e.timer);<br>body.removeChild(e.enemy);<br>enemyArr.splice(e,<span class="hljs-number">1</span>);<br>&#125;;<br>&#125;,es)<br>&#125;,en);<br>&#125;<br>args.onmouseout=begin;<br>begin();<br><br>args.onmousemove=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>en=<span class="hljs-number">2200</span>- <span class="hljs-built_in">parseInt</span>(enemyNum.value)*<span class="hljs-number">200</span>;<span class="hljs-comment">//调节敌机属性，并重启计时器更新属性</span><br>es=<span class="hljs-number">50</span>-<span class="hljs-built_in">parseInt</span>(enemySpeed.value);<br><span class="hljs-built_in">clearInterval</span>(body.timer);<br>&#125;<br><span class="hljs-keyword">var</span> timer1=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//定义子弹自动发射</span><br><span class="hljs-keyword">var</span> div=<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<span class="hljs-comment">//创建div元素</span><br>div.setAttribute(<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;zd&quot;</span>);<span class="hljs-comment">//设置类名</span><br>div.style.top=plane.style.top;<br>div.style.left=plane.style.left;<span class="hljs-comment">//设置位置，跟随飞机位置</span><br>body.appendChild(div);<span class="hljs-comment">//将元素添加到body</span><br>div.timer=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//定时生成子弹</span><br>div.style.top=div.offsetTop-<span class="hljs-number">5</span>+<span class="hljs-string">&quot;px&quot;</span>;<span class="hljs-comment">//调整位置</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;enemyArr.length;i++)&#123;<span class="hljs-comment">//遍历敌机列表，判断击中</span><br><span class="hljs-keyword">if</span>(div.offsetTop-enemyArr[i].top&lt;=<span class="hljs-number">50</span> &amp;&amp; <span class="hljs-built_in">Math</span>.abs(div.offsetLeft-enemyArr[i].left)&lt;=<span class="hljs-number">50</span>)&#123;<br>body.removeChild(div);<span class="hljs-comment">//击中后删除元素</span><br><span class="hljs-built_in">clearInterval</span>(div.timer);<span class="hljs-comment">//关闭元素计时器</span><br><span class="hljs-built_in">clearInterval</span>(enemyArr[i].timer);<span class="hljs-comment">//关闭敌机计时器</span><br>body.removeChild(enemyArr[i].enemy);<span class="hljs-comment">//删除敌机元素</span><br>enemyArr.splice(i,<span class="hljs-number">1</span>);<span class="hljs-comment">//从敌机数组中删除</span><br>count+=<span class="hljs-number">10</span>;<br>score.innerHTML=count+<span class="hljs-string">&quot;分&quot;</span>;<span class="hljs-comment">//加分</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(div.offsetTop&lt;=<span class="hljs-number">0</span>)&#123;<br>body.removeChild(div);<span class="hljs-comment">//子弹到顶端删除并关闭计时器</span><br><span class="hljs-built_in">clearInterval</span>(div.timer);<br>&#125;<br>&#125;,<span class="hljs-number">1</span>);<br>&#125;,<span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/link/markdownImg/show.jpg" alt="实现效果"><br><a href="/link/creation/index.html">点我进入网页预览</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小游戏</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World And MyNote</title>
    <link href="/2021/06/28/hello-world/"/>
    <url>/2021/06/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>简单记录自己在使用博客的学习过程和常用操作。</p><!-- --><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><p>博客所在命令行执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page categories<br></code></pre></td></tr></table></figure><p>成功后编辑新生成的categories下的index.md。添加type参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-06-30</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>给文章添加categories属性</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">categories:<br><span class="hljs-bullet">- </span>类名<br></code></pre></td></tr></table></figure><h3 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h3><p>博客所在文件夹执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page tags<br></code></pre></td></tr></table></figure><p>成功后编辑新生成的tags下的index.md。添加type参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-06-30</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;tags&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>给文章添加tags属性</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span><br>- 标签<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
